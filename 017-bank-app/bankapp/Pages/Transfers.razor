@page "/Transfers"
@inject IAccountService AccountService

<h1>Transfer</h1>

<EditForm Model="_model" OnValidSubmit="SubmitTransferAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="accountfield">
        <label>From Account:</label>
        <InputSelect class="inputfield" @bind-Value="_model.FromAccountId">
            <option value="@Guid.Empty">Choose account</option>
            @foreach (var account in _accounts)
            {
                <option value="@account.Id">
                    @account.Name (@account.Balance.ToString("F2") @account.CurrencyType)
                </option>
            }
        </InputSelect>
    </div>

    <div class="accountfield">
        <label>To Account:</label>
        <InputSelect class="inputfield" @bind-Value="_model.ToAccountId">
            <option value="@Guid.Empty">Choose account</option>
            @foreach (var account in _accounts.Where(a => a.Id != _model.FromAccountId))
            {
                <option value="@account.Id">
                    @account.Name (@account.Balance.ToString("F2") @account.CurrencyType)
                </option>
            }
        </InputSelect>
    </div>

    <div class="accountfield">
        <label>Amount:</label>
        <InputNumber class="inputfield" @bind-Value="_model.Amount" />
    </div>

    <button class="formbutton" type="submit">Transfer</button>
</EditForm>

@if (!string.IsNullOrEmpty(_message))
{
    <div class="accountfield">
        <p class="@(_isSuccess ? "success-message" : "error-message")">@_message</p>
    </div>
}

@code {
    private readonly TransferModel _model = new();
    private List<IBankAccount> _accounts = new();
    private string? _message;
    private bool _isSuccess;

    protected override async Task OnInitializedAsync()
    {
        await LoadAccountsAsync();
    }

    private async Task LoadAccountsAsync()
    {
        _accounts = await AccountService.GetAccounts();
    }

    private async Task SubmitTransferAsync()
    {
        try
        {
            if (_model.FromAccountId == Guid.Empty)
            {
                _message = "Please select a source account.";
                _isSuccess = false;
                return;
            }

            if (_model.ToAccountId == Guid.Empty)
            {
                _message = "Please select a destination account.";
                _isSuccess = false;
                return;
            }

            if (_model.FromAccountId == _model.ToAccountId)
            {
                _message = "Cannot transfer to the same account.";
                _isSuccess = false;
                return;
            }

            if (_model.Amount is null or <= 0)
            {
                _message = "Amount must be greater than zero.";
                _isSuccess = false;
                return;
            }
            
            // Saves current selection
            var previousFromId = _model.FromAccountId;
            var previousToId = _model.ToAccountId;

            await AccountService.TransferAsync(_model.FromAccountId, _model.ToAccountId, _model.Amount.Value);

            _message = $"Successfully transferred {_model.Amount:F2}!";
            _isSuccess = true;

            // Refresh account list
            await LoadAccountsAsync();
            // Reselect the same accounts
            _model.FromAccountId = previousFromId;
            _model.ToAccountId = previousToId;
            _model.Amount = null;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _message = $"Error: {ex.Message}";
            _isSuccess = false;
        }
    }

    private class TransferModel
    {
        public Guid FromAccountId { get; set; } = Guid.Empty;
        public Guid ToAccountId { get; set; } = Guid.Empty;
        public decimal? Amount { get; set; }
    }
}
