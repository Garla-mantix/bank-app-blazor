@page "/Transfer"
@inject IAccountService AccountService

<PageTitle>Bankster - Transfer</PageTitle>

<h1>Transfer</h1>

@*Form for transfers between accounts*@
<EditForm Model="_model" OnValidSubmit="SubmitTransferAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    @*Label and dropdown menu for from-account*@
    <div class="accountfield">
        <label>From Account:</label>
        <InputSelect TValue="Guid" class="inputfield"
                     Value="_model.FromAccountId"
                     ValueChanged="OnFromAccountChanged"
                     ValueExpression="() => _model.FromAccountId">
            <option value="@Guid.Empty">Select from account</option>
            @foreach (var account in _accounts)
            {
                <option value="@account.Id">@account.Name (@account.Balance.ToString("F2") @account.CurrencyType)</option>
            }
        </InputSelect>
    </div>

    @*Label and dropdown menu for to-account*@
    <div class="accountfield">
        <label>To Account:</label>
        <InputSelect @key="_model.FromAccountId"
                     TValue="Guid"
                     class="inputfield"
                     Value="_model.ToAccountId"
                     ValueChanged="(Guid v) => _model.ToAccountId = v"
                     ValueExpression="() => _model.ToAccountId"
                     disabled="@(_model.FromAccountId == Guid.Empty)">
            <option value="@Guid.Empty">Choose account</option>
            @foreach (var account in _accounts.Where(a => a.Id != _model.FromAccountId))
            {
                <option value="@account.Id">
                    @account.Name (@account.Balance.ToString("F2") @account.CurrencyType)
                </option>
            }
        </InputSelect>
    </div>

    @*Label and input field for amount*@
    <div class="accountfield">
        <label>Amount:</label>
        <InputNumber TValue="decimal?" class="inputfield"
                     Value="_model.Amount"
                     ValueChanged="(decimal? v) => _model.Amount = v"
                     ValueExpression="() => _model.Amount" />
    </div>

    @*Button for executing transfer*@
    <button class="formbutton" type="submit">Transfer</button>
</EditForm>

@*Success or error message*@
@if (!string.IsNullOrEmpty(_message))
{
    <div class="accountfield">
        <p class="@(_isSuccess ? "success-message" : "error-message")">@_message</p>
    </div>
}

@code {
    /*Variable holding data for the current transfer*/
    private readonly TransferModel _model = new();
    /*List of existing accounts*/
    private List<IBankAccount> _accounts = new();
    /*Status message that gets assigned different values depending on validation*/
    private string? _message;
    /*Indicates whether transfer went through or not*/
    private bool _isSuccess;

    /*Initialize by loading existing accounts*/
    protected override async Task OnInitializedAsync()
    {
        await LoadAccountsAsync();
    }

    /*Fetching accounts from account service*/
    private async Task LoadAccountsAsync()
    {
        _accounts = await AccountService.GetAccounts();
    }

    /*Async task for performing the transfer*/
    private async Task SubmitTransferAsync()
    {
        /*Validation*/
        if (_model.FromAccountId == Guid.Empty)
        {
            _message = "Please select a source account.";
            _isSuccess = false;
            return;
        }
        if (_model.ToAccountId == Guid.Empty)
        {
            _message = "Please select a destination account.";
            _isSuccess = false;
            return;
        }
        if (_model.FromAccountId == _model.ToAccountId)
        {
            _message = "Cannot transfer to the same account.";
            _isSuccess = false;
            return;
        }
        if (_model.Amount is null or <= 0)
        {
            _message = "Amount must be greater than zero.";
            _isSuccess = false;
            return;
        }

        try
        {
            /*Make the transfer*/
            await AccountService.TransferAsync(_model.FromAccountId, _model.ToAccountId, _model.Amount.Value);

            _message = $"Successfully transferred {_model.Amount:F2}!";
            _isSuccess = true;

            // Refresh balances
            await LoadAccountsAsync();
            
            /*Reset to-account and amount after transfer*/
            _model.ToAccountId = Guid.Empty;
            _model.Amount = null;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _message = $"Error: {ex.Message}";
            _isSuccess = false;
        }
    }
    
    /*Make sure to-account is changed when new from-account is selected*/
    private void OnFromAccountChanged(Guid selectedId)
    {
        _model.FromAccountId = selectedId;
        _model.ToAccountId = Guid.Empty;
        StateHasChanged();
    }

    /*Model storing selected accounts and transfer amount*/
    private class TransferModel
    {
        public Guid FromAccountId { get; set; } = Guid.Empty;
        public Guid ToAccountId { get; set; } = Guid.Empty;
        public decimal? Amount { get; set; }
    }
}
