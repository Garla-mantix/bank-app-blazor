@page "/DepositWithdraw"
@inject IAccountService AccountService

<PageTitle>Bankster - Deposit / Withdraw</PageTitle>

<h1>Deposit / Withdraw</h1>

@*Form for deposits/withdrawals*@
<EditForm Model="_model" OnValidSubmit="SubmitTransactionAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    @*Dropdown menu for choosing between existing accounts*@
    <div class="accountfield">
        <label>Select Account:</label>
        <InputSelect class="inputfield" @bind-Value="_model.SelectedAccountId">
            <option value="@Guid.Empty">Choose account</option>
            @foreach (var account in _accounts)
            {
                <option value="@account.Id">
                    @account.Name (@account.Balance.ToString("F2") @account.CurrencyType)
                </option>
            }
        </InputSelect>
    </div>
    
    @*Dropdown menu for transaction types*@
    <div class="accountfield">
        <label>Transaction Type:</label>
        <InputSelect class="inputfield" @bind-Value="_model.TransactionType">
            <option value="">Choose type</option>
            <option value="@TransactionType.Deposit">Deposit</option>
            <option value="@TransactionType.Withdrawal">Withdraw</option>
        </InputSelect>
    </div>
    
    @*Label and input field for amount to be transfered*@
    <div class="accountfield">
        <label>Amount:</label>
        <InputNumber class="inputfield" @bind-Value="_model.Amount" />
    </div>
    
    @*Button for making transaction*@
    <button class="formbutton" type="submit">Apply</button>
</EditForm>

@*Sucess or error message*@
@if (!string.IsNullOrEmpty(_message))
{
    <div class="accountfield">
        <p class="@(_isSuccess ? "success-message" : "error-message")">@_message</p>
    </div>
}

@code {
    /*Variable storing data for current transaction*/
    private readonly TransactionModel _model = new();
    /*List of existing accounts*/
    private List<IBankAccount> _accounts = new();
    /*Status message that gets assigned different values depending on validation*/
    private string? _message;
    /*Indicates whether transaction went through or not*/
    private bool _isSuccess;

    /*Initializing component by loading existing bank accounts to the UI*/
    protected override async Task OnInitializedAsync()
    {
        await LoadAccountsAsync();
    }

    /*Async task for loading existing accounts*/
    private async Task LoadAccountsAsync()
    {
        _accounts = await AccountService.GetAccounts();
    }

    /*Async task for making transactions*/
    private async Task SubmitTransactionAsync()
    {
        try
        {
            /*Validation*/
            if (_model.SelectedAccountId == Guid.Empty)
            {
                _message = "Please select an account.";
                _isSuccess = false;
                return;
            }
            if (_model.Amount is null or <= 0)
            {
                _message = "Amount must be greater than zero.";
                _isSuccess = false;
                return;
            }
            
            var selectedAccountId = _model.SelectedAccountId;

            /*Performs transaction*/
            switch (_model.TransactionType)
            {
                case TransactionType.Deposit:
                    await AccountService.DepositAsync(_model.SelectedAccountId, _model.Amount!.Value);
                    _message = $"Deposited {_model.Amount} successfully!";
                    _isSuccess = true;
                    break;

                case TransactionType.Withdrawal:
                    await AccountService.WithdrawAsync(_model.SelectedAccountId, _model.Amount!.Value);
                    _message = $"Withdrew {_model.Amount} successfully!";
                    _isSuccess = true;
                    break;

                default:
                    _message = "Please select a transaction type.";
                    _isSuccess = false;
                    return;
            }
            
            await LoadAccountsAsync();
            _model.SelectedAccountId = selectedAccountId;
            _model.Amount = null;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _message = $"Error: {ex.Message}";
            _isSuccess = false;
        }
    }

    /*Model for transactions*/
    private class TransactionModel
    {
        public Guid SelectedAccountId { get; set; } = Guid.Empty;
        public TransactionType TransactionType { get; set; }
        public decimal? Amount { get; set; }
    }
}
