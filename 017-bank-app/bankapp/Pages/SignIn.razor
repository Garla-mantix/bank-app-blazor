@page "/SignIn"
@inject IStorageService Storage
@inject SignedInStatus Auth
@inject NavigationManager Nav

<h1>Sign In</h1>

@*Messages for success or failed login*@
@if (!string.IsNullOrEmpty(Message))
{
    <p>@Message</p>
}

@*Label and input field for username*@
<div class="accountfield">
    <label>Username:</label>
    <InputText @bind-Value="Username" class="inputfield" />
</div>

@*Label and input field for PIN password*@
<div class="accountfield">
    <label>PIN:</label>
    <InputText @bind-Value="PIN" class="inputfield" type="password" />
</div>

@*Buttons for sign-up and sign-in*@
<button class="formbutton" @onclick="HandleSignIn">Sign In</button>
<button class="formbutton" @onclick="HandleSignUp">Sign Up</button>

@code {
    /* Variable storing username input */
    private string Username = "";
    /* Variable storing PIN input */
    private string PIN = "";
    /* Variable for feedback message */
    private string? Message;

    /// <summary>
    /// Async task for verifying username and PIN in order to login.
    /// </summary>
    private async Task HandleSignIn()
    {
        /* Load stored username and PIN */
        var savedUsername = await Storage.GetItemAsync<string>("username");
        var savedPIN = await Storage.GetItemAsync<string>("pin");

        /* Check if an account exists */
        if (string.IsNullOrEmpty(savedUsername) || string.IsNullOrEmpty(savedPIN))
        {
            Message = "No account found.";
            return;
        }

        /* Compare stored credentials with user input */
        if (Username == savedUsername && PIN == savedPIN)
        {
            Auth.SignIn();
            Nav.NavigateTo("/");
            return;
        }

        /* Display error message if credentials do not match */
        Message = "Wrong username or PIN.";
    }

    /// <summary>
    /// Stores new username and PIN to local storage.
    /// Validates username (letter and numbers only, max 8 chars) and PIN (4 digits).
    /// </summary>
    private async Task HandleSignUp()
    {
        /* Validates username */
        if (string.IsNullOrWhiteSpace(Username))
        {
            Message = "Username cannot be empty.";
            return;
        }

        if (Username.Length > 8)
        {
            Message = "Username must be max 8 characters.";
            return;
        }

        if (!Username.All(char.IsLetterOrDigit))
        {
            Message = "Username can only contain letters and numbers.";
            return;
        }

        /* Validates PIN */
        if (string.IsNullOrWhiteSpace(PIN))
        {
            Message = "PIN cannot be empty.";
            return;
        }

        if (!PIN.All(char.IsDigit))
        {
            Message = "PIN must contain digits only.";
            return;
        }

        if (PIN.Length != 4)
        {
            Message = "PIN must be exactly 4 digits.";
            return;
        }

        /* Store username and PIN in local storage */
        await Storage.SetItemAsync("username", Username);
        await Storage.SetItemAsync("pin", PIN);

        /* Inform user that account was created successfully */
        Message = "Account created! You can now sign in.";
    }
}
