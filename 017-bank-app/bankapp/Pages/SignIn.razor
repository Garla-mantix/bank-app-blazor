@page "/SignIn"
@inject IStorageService Storage
@inject SignedInStatus Auth
@inject NavigationManager Nav

<h1>Sign In</h1>

<EditForm Model="this" OnValidSubmit="HandleSignIn">
    @* Label and input field for username *@
    <div class="accountfield">
        <label>Username:</label>
        <InputText class="inputfield" @bind-Value="_username" />
    </div>

    @* Label and input field for PIN password *@
    <div class="accountfield">
        <label>PIN:</label>
        <InputText class="inputfield" @bind-Value="_pin" type="password" inputmode="numeric" maxlength="4" />
    </div>

    @* Buttons for sign-up and sign-in *@
    <button class="formbutton" type="submit">Sign In</button>
    <button class="formbutton" type="button" @onclick="HandleSignUp">Sign Up</button>
    
    @*Success or error message*@
    @if (!string.IsNullOrEmpty(_message))
    {
        <div class="accountfield">
            <p class="@(_isSuccess ? "success-message" : "error-message")">@_message</p>
        </div>
    }
</EditForm>

@code {
    // Variable storing username input
    private string _username = "";
    
    // Variable storing PIN input
    private string _pin = "";
    
    // Variable for feedback message
    private string? _message;
    
    // Indicates whether account creation was successful or not
    private bool _isSuccess;

    /// <summary>
    /// Async task for verifying username and PIN in order to login.
    /// </summary>
    private async Task HandleSignIn()
    {
        /* Load stored username and PIN */
        var savedUsername = await Storage.GetItemAsync<string>("username");
        var savedPIN = await Storage.GetItemAsync<string>("pin");

        /* Check if account exists */
        if (string.IsNullOrEmpty(savedUsername) || string.IsNullOrEmpty(savedPIN))
        {
            _message = "No account found.";
            Console.WriteLine(_message);
            _isSuccess = false;
            return;
        }

        // Compare stored credentials with user input
        if (_username == savedUsername && _pin == savedPIN)
        {
            Auth.SignIn();
            Nav.NavigateTo("/");
            return;
        }
        
        _message = "Wrong username or PIN.";
        _isSuccess = false;
        Console.WriteLine(_message);
    }

    /// <summary>
    /// Stores new username and PIN to local storage.
    /// Validates username (letters and numbers only, max 8 chars) and PIN (4 digits).
    /// </summary>
    private async Task HandleSignUp()
    {
        // Validates username
        if (string.IsNullOrWhiteSpace(_username))
        {
            _message = "Username cannot be empty.";
            Console.WriteLine(_message);
            _isSuccess = false;
            return;
        }
        if (_username.Length > 8)
        {
            _message = "Username must be max 8 characters.";
            Console.WriteLine(_message);
            _isSuccess = false;
            return;
        }
        if (!_username.All(char.IsLetterOrDigit))
        {
            _message = "Username can only contain letters and numbers.";
            Console.WriteLine(_message);
            _isSuccess = false;
            return;
        }
        
        // Validates PIN
        if (string.IsNullOrWhiteSpace(_pin))
        {
            _message = "PIN cannot be empty.";
            Console.WriteLine(_message);
            _isSuccess = false;
            return;
        }
        if (!_pin.All(char.IsDigit))
        {
            _message = "PIN must contain digits only.";
            Console.WriteLine(_message);
            _isSuccess = false;
            return;
        }
        if (_pin.Length != 4)
        {
            _message = "PIN must be exactly 4 digits.";
            Console.WriteLine(_message);
            _isSuccess = false;
            return;
        }
        
        // Store username and PIN in local storage
        await Storage.SetItemAsync("username", _username);
        await Storage.SetItemAsync("pin", _pin);

        _message = "Account created! You can now sign in.";
        Console.WriteLine(_message);
        _isSuccess = true;
    }
}
