@page "/MyAccounts"
@inject IAccountService AccountService

<PageTitle>Bankster - My Accounts</PageTitle>

<h1>Your Accounts</h1>

@*Checking if there are any existing accounts*@
@if ((_depositAccounts.Count + _savingsAccounts.Count) == 0)
{
    <p>You have no accounts yet.</p>
    <p>Go to <a href="/CreateAccount"><strong>Create Account</strong></a> to get started!</p>
}
else
{
    <h3>Deposit Accounts</h3>
    
    // Checking if there are any deposit accounts
    @if (_depositAccounts.Count == 0)
    {
        <p>No deposit accounts yet.</p>
    }
    else
    {
        // Listing all deposit accounts
        <table class="table account-table">
            <thead>
            <tr>
                <th>Name</th>
                <th>Balance</th>
                <th>Currency</th>
                <th>Interest Rate</th>
                <th>Last Updated</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var account in _depositAccounts)
            {
                <tr>
                    <td><strong>@account.Name</strong></td>
                    <td>@account.Balance.ToString("F2")</td>
                    <td>@account.CurrencyType</td>
                    <td>@account.InterestRate.ToString("P1")</td>
                    <td>@(account.LastUpdated != default ? account.LastUpdated.ToLocalTime().ToString("d'/'M/yyyy (HH:mm)") : "N/A")</td>
                </tr>
            }
            </tbody>
        </table>

    }

    <h3>Savings Accounts</h3>
    
    // Checking if there are any existing savings accounts
    @if (_savingsAccounts.Count == 0)
    {
        <p>No savings accounts yet.</p>
    }
    else
    {
        // Listing all savings accounts
        <table class="table account-table">
            <thead>
            <tr>
                <th>Name</th>
                <th>Balance</th>
                <th>Currency</th>
                <th>Interest Rate</th>
                <th>Last Updated</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var account in _savingsAccounts)
            {
                <tr>
                    <td><strong>@account.Name</strong></td>
                    <td>@account.Balance.ToString("F2")</td>
                    <td>@account.CurrencyType</td>
                    <td>@account.InterestRate.ToString("P1")</td>
                    <td>@(account.LastUpdated != default ? account.LastUpdated.ToLocalTime().ToString("d'/'M/yyyy (HH:mm)") : "N/A")</td>
                </tr>
            }
            </tbody>
        </table>
    }
}

@code {
    // List for existing deposit accounts
    private List<IBankAccount> _depositAccounts = new();
    
    // List for existing savings accounts
    private List<IBankAccount> _savingsAccounts = new();

    // Initialize by loading all accounts and separating them by type
    protected override async Task OnInitializedAsync()
    {
        // Apply interest
        await AccountService.ApplyYearlyInterestAsync();
        
        // Fetch all accounts from the service
        var allAccounts = await AccountService.GetAccounts() ?? new List<IBankAccount>();

        // Separate them into Deposit and Savings
        _depositAccounts = allAccounts
            .Where(a => a.AccountType == AccountType.Deposit)
            .ToList();

        _savingsAccounts = allAccounts
            .Where(a => a.AccountType == AccountType.Savings)
            .ToList();
    }
}
