@page "/CreateAccount"
@inject IAccountService AccountService;

<h3>Create Account</h3>
<EditForm Model="_model" OnValidSubmit="CreateAccountAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="accountfield">
        <label>Account Name:</label>
        <InputText class="inputfield" @bind-Value="_model.Name" />
    </div>
    <div class="accountfield">
        <label>Account Type:</label>
        <InputSelect class="inputfield" @bind-Value="_model.AccountType">
            <option value="">Pick type</option>
            <option value="@AccountType.Deposit">Deposit Account</option>
            <option value="@AccountType.Savings">Savings Account</option>
        </InputSelect>
    </div>
    <div class="accountfield">
        <label>Currency:</label>
        <InputSelect class="inputfield" @bind-Value="_model.CurrencyType">
            <option value="">Pick type</option>
            <option value="@CurrencyType.SEK">SEK</option>
            <option value="@CurrencyType.EURO">EURO</option>
        </InputSelect>
    </div>
    <div class="accountfield">
        <label>Balance:</label>
        <InputNumber class="inputfield" @bind-Value="_model.InitialBalance"></InputNumber>
    </div>
    <button class="formbutton" type="submit">Create</button>
    <div class="accountfield">
        <h4 class="subhead">Existing accounts:</h4>
        @if (_accounts.Count == 0)
        {
            <p>No accounts yet. Create accounts above!</p>
        }
        else
        {
            <ul>
                @foreach(var account in _accounts)
                {
                    <li class="listitem">
                        <strong>@account.Name</strong> [@account.AccountType account with balance: @account.Balance  @account.CurrencyType]
                        <small>(Last updated: @account.LastUpdated.ToLocalTime())</small>
                    </li>
                }
            </ul>
        }
    </div>
</EditForm>


    @code {
        private readonly CreateAccountModel _model = new();
        private List<IBankAccount> _accounts = new();

        protected override void OnInitialized()
        {
            _accounts = AccountService.GetAccounts().ToList();
            base.OnInitialized();
        }

        private Task CreateAccountAsync()
        {
            try
            {
                Console.WriteLine(_model.Name);
                
                AccountService.CreateAccount(
                    _model.Name,
                    _model.AccountType,
                    _model.CurrencyType,
                    _model.InitialBalance);
                
                _accounts = AccountService.GetAccounts().ToList();
                _model.Clear();
                StateHasChanged();

            }
            catch (Exception exception)
            {
                Console.WriteLine(exception);
            }
            return Task.CompletedTask;
        }

        private class CreateAccountModel
        {
            public string? Name { get; set; }
            public AccountType AccountType { get; set; }
            public CurrencyType CurrencyType{ get; set; }
            public decimal InitialBalance { get; set; } = 0;

            public void Clear()
            {
                Name = String.Empty;
                AccountType = AccountType.Deposit;
                CurrencyType = CurrencyType.SEK;
                InitialBalance = 0;
            }
        }
    }

