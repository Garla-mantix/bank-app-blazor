@page "/CreateAccount"
@inject IAccountService AccountService

<h1>Create Account</h1>
<EditForm Model="_model" OnValidSubmit="CreateAccountAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="accountfield">
        <label>Account Name:</label>
        <InputText class="inputfield" @bind-Value="_model.Name" />
    </div>
    <div class="accountfield">
        <label>Account Type:</label>
        <InputSelect class="inputfield" @bind-Value="_model.AccountType">
            <option value="">Pick type</option>
            <option value="@AccountType.Deposit">Deposit Account</option>
            <option value="@AccountType.Savings">Savings Account</option>
        </InputSelect>
    </div>
    <div class="accountfield">
        <label>Currency:</label>
        <InputSelect class="inputfield" @bind-Value="_model.CurrencyType">
            <option value="">Pick type</option>
            <option value="@CurrencyType.SEK">SEK</option>
            <option value="@CurrencyType.EURO">EURO</option>
        </InputSelect>
    </div>
    <div class="accountfield">
        <label>Balance:</label>
        <InputNumber class="inputfield" @bind-Value="_model.InitialBalance"></InputNumber>
    </div>
    <button class="formbutton" type="submit">Create</button>
    <div class="accountfield">
        @if (!string.IsNullOrEmpty(_message))
        {
            <p class="@(_isSuccess ? "success-message" : "error-message")">@_message</p>
        }
    </div>
</EditForm>

    @code {
        private readonly CreateAccountModel _model = new();
        private List<IBankAccount> _accounts = new();
        private string? _message;
        private bool _isSuccess;

        protected override async Task OnInitializedAsync()
        {
            _accounts = await AccountService.GetAccounts();
        }

        private async Task CreateAccountAsync()
        {
            try
            {
                if (_model.Name != null)
                {
                    await AccountService.CreateAccountAsync(
                        _model.Name,
                        _model.AccountType,
                        _model.CurrencyType,
                        _model.InitialBalance);
                }

                _accounts = await AccountService.GetAccounts();
                _message = $"Account \"{_model.Name}\" created successfully!";
                _isSuccess = true;
                _model.Clear();
                StateHasChanged();
            }
            catch (Exception exception)
            {
                _message = $"Failed to create account: {exception.Message}!";
                _isSuccess = false;
            }
        }

        private class CreateAccountModel
        {
            public string? Name { get; set; }
            public AccountType AccountType { get; set; }
            public CurrencyType CurrencyType{ get; set; }
            public decimal InitialBalance { get; set; }

            public void Clear()
            {
                Name = String.Empty;
                AccountType = AccountType.Deposit;
                CurrencyType = CurrencyType.SEK;
                InitialBalance = 0;
            }
        }
    }

